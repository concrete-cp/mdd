package mdd

import org.scalatest.concurrent.TimeLimits
import org.scalatest.time.{Seconds, Span}
import org.scalatest.{FlatSpec, Inspectors, Matchers}

final class MDDTest extends FlatSpec with Matchers with Inspectors with TimeLimits {

  val t = MDD0 + Array(1, 2, 3) + Array(1, 3, 4) + Array(1, 2, 5) + Array(2, 3, 5)
  val s = MDD0 + Array(1, 2, 5) + Array(1, 3, 4) + Array(1, 2, 3) + Array(2, 3, 5)
  val u = MDD(Seq(
    Seq(1, 2, 3),
    Seq(1, 3, 4),
    Seq(1, 2, 5),
    Seq(2, 3, 5)))
  private val ts: MDD = MDD(Seq(Seq(0, 0), Seq(0, 1), Seq(1, 0)))

  "MDD" should "detect containment" in {
    ts should contain(Array(0, 1))
    ts should not contain (Array(1, 1))

    t should contain(Array(1, 3, 4))
    t should not contain (Array(1, 2, 4))

    forAll(t.toSeq.map(_.toArray)) { tuple =>
      s should contain(tuple)
      u should contain(tuple)
    }
  }

  it should "iterate over all tuples" in {
    ts.iterator.size shouldBe ts.lambda()
  }

  it should "compute its size correctly" in {
    ts.lambda() shouldBe BigInt(3)

    t.lambda() shouldBe s.lambda()

    u.lambda() shouldBe t.lambda()
  }

  it should "reduce" in {
    val m = MDD(Seq(
      Seq(2, 3, 2),
      Seq(1, 2, 1),
      Seq(1, 1, 1),
      Seq(1, 1, 3),
      Seq(3, 1, 1),
      Seq(3, 1, 3)))
      .reduce()

    m.lambda() shouldBe BigInt(6)
    m.edges() shouldBe 11

  }

  it should "reduce twice and return same instance" in {
    val m = MDD(Seq(
      Seq(2, 3, 2),
      Seq(1, 2, 1),
      Seq(1, 1, 1),
      Seq(1, 1, 3),
      Seq(3, 1, 1),
      Seq(3, 1, 3)))
      .reduce()

    m.reduce() shouldBe theSameInstanceAs(m)


  }

  it should "have correct number of nodes" in {
    val m0 = MDD(Seq(
      Seq(2, 3, 2),
      Seq(1, 2, 1),
      Seq(1, 1, 1),
      Seq(1, 1, 3),
      Seq(3, 1, 1),
      Seq(3, 1, 3)))

    m0.lambda() shouldBe 6
    m0.nodes() should have('size (9))
    m0.vertices() shouldBe 9
    m0.edges() shouldBe 13

    val m = m0.reduce()

    m.lambda() shouldBe 6
    m.nodes() should have('size (8))
    m.vertices() shouldBe 8
    m.edges() shouldBe 11

    val m2 = m.filterTrie(Array(MySet(1, 2, 3), MySet(1), MySet(1, 2, 3)), List(1))
    withClue(m2.iterator.mkString(", ")) {
      m2.lambda() shouldBe 4
      m2.nodes() should have('size (5))
      m2.edges() shouldBe 6
      m2.vertices() shouldBe 5
    }

    val m3 = m2.reduce()
    m3.lambda() shouldBe 4
    m3.nodes() should have('size (4))
    m3.vertices() shouldBe 4
    m3.edges() shouldBe 5

  }

  it should "reduce quickly large MDDs" in {
    val k = 10
    val d = 10

    def complete(k: Int, d: Int): MDD = {
      if (k <= 0) MDDLeaf
      else {
        val next = complete(k - 1, d)
        val trie = (0 until d).map {
          i => i -> next
        }
        MDD(trie)
      }
    }

    val mdd = complete(10, 10)
    mdd.lambda() shouldBe BigInt(d).pow(k)
    mdd.edges() shouldBe d * k

    failAfter(Span(5, Seconds))(mdd.reduce)

  }

  it should "compute unions correctly" in {
    val r2 = MDD(Seq(
      Seq(1, 2, 3), Seq(2, 5, 6), Seq(3, 5, 5)))

    r2.toSet ++ u should contain theSameElementsAs (u union r2)
  }

  it should "intersect" in {
    val r3 = MDD0 + List(3, 5, 5) + List(1, 2, 2) + List(1, 2, 5) + List(2, 3, 5)
    val ri = u.intersect(r3)

    val nativeImpl = r3.filter(t => u.contains(t.toArray))

    nativeImpl should contain theSameElementsAs ri
  }

  it should "be projected" in {
    u.project(Set(0, 1)).asInstanceOf[Iterable[_]] should contain theSameElementsAs (Seq(List(1, 2), List(1, 3), List(2, 3)))
  }

  it should "add dimensions" in {

    val r2 = u.insertDim(3, List(2, 4, 6))
    r2.lambda() shouldBe u.lambda() * 3

  }

  it should "add starred tuples" in {
    val tuples =
      """-1,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*|0,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*|1,-1,0,*,*,*,*,*,*,*,*,*,*,*,*,*|1,0,1,*,*,*,*,*,*,*,*,*,*,*,*,*|1,1,2,*,*,*,*,*,*,*,*,*,*,*,*,*|1,2,3,*,*,*,*,*,*,*,*,*,*,*,*,*|1,3,4,*,*,*,*,*,*,*,*,*,*,*,*,*|1,4,5,*,*,*,*,*,*,*,*,*,*,*,*,*|1,5,6,*,*,*,*,*,*,*,*,*,*,*,*,*|1,6,7,*,*,*,*,*,*,*,*,*,*,*,*,*|1,7,8,*,*,*,*,*,*,*,*,*,*,*,*,*|1,8,9,*,*,*,*,*,*,*,*,*,*,*,*,*|1,9,10,*,*,*,*,*,*,*,*,*,*,*,*,*|1,10,11,*,*,*,*,*,*,*,*,*,*,*,*,*|1,11,12,*,*,*,*,*,*,*,*,*,*,*,*,*|1,12,13,*,*,*,*,*,*,*,*,*,*,*,*,*|1,13,14,*,*,*,*,*,*,*,*,*,*,*,*,*|2,-1,*,0,*,*,*,*,*,*,*,*,*,*,*,*|2,0,*,1,*,*,*,*,*,*,*,*,*,*,*,*|2,1,*,2,*,*,*,*,*,*,*,*,*,*,*,*|2,2,*,3,*,*,*,*,*,*,*,*,*,*,*,*|2,3,*,4,*,*,*,*,*,*,*,*,*,*,*,*|2,4,*,5,*,*,*,*,*,*,*,*,*,*,*,*|2,5,*,6,*,*,*,*,*,*,*,*,*,*,*,*|2,6,*,7,*,*,*,*,*,*,*,*,*,*,*,*|2,7,*,8,*,*,*,*,*,*,*,*,*,*,*,*|2,8,*,9,*,*,*,*,*,*,*,*,*,*,*,*|2,9,*,10,*,*,*,*,*,*,*,*,*,*,*,*|2,10,*,11,*,*,*,*,*,*,*,*,*,*,*,*|2,11,*,12,*,*,*,*,*,*,*,*,*,*,*,*|2,12,*,13,*,*,*,*,*,*,*,*,*,*,*,*|2,13,*,14,*,*,*,*,*,*,*,*,*,*,*,*|3,-1,*,*,0,*,*,*,*,*,*,*,*,*,*,*|3,0,*,*,1,*,*,*,*,*,*,*,*,*,*,*|3,1,*,*,2,*,*,*,*,*,*,*,*,*,*,*|3,2,*,*,3,*,*,*,*,*,*,*,*,*,*,*|3,3,*,*,4,*,*,*,*,*,*,*,*,*,*,*|3,4,*,*,5,*,*,*,*,*,*,*,*,*,*,*|3,5,*,*,6,*,*,*,*,*,*,*,*,*,*,*|3,6,*,*,7,*,*,*,*,*,*,*,*,*,*,*|3,7,*,*,8,*,*,*,*,*,*,*,*,*,*,*|3,8,*,*,9,*,*,*,*,*,*,*,*,*,*,*|3,9,*,*,10,*,*,*,*,*,*,*,*,*,*,*|3,10,*,*,11,*,*,*,*,*,*,*,*,*,*,*|3,11,*,*,12,*,*,*,*,*,*,*,*,*,*,*|3,12,*,*,13,*,*,*,*,*,*,*,*,*,*,*|3,13,*,*,14,*,*,*,*,*,*,*,*,*,*,*|4,-1,*,*,*,0,*,*,*,*,*,*,*,*,*,*|4,0,*,*,*,1,*,*,*,*,*,*,*,*,*,*|4,1,*,*,*,2,*,*,*,*,*,*,*,*,*,*|4,2,*,*,*,3,*,*,*,*,*,*,*,*,*,*|4,3,*,*,*,4,*,*,*,*,*,*,*,*,*,*|4,4,*,*,*,5,*,*,*,*,*,*,*,*,*,*|4,5,*,*,*,6,*,*,*,*,*,*,*,*,*,*|4,6,*,*,*,7,*,*,*,*,*,*,*,*,*,*|4,7,*,*,*,8,*,*,*,*,*,*,*,*,*,*|4,8,*,*,*,9,*,*,*,*,*,*,*,*,*,*|4,9,*,*,*,10,*,*,*,*,*,*,*,*,*,*|4,10,*,*,*,11,*,*,*,*,*,*,*,*,*,*|4,11,*,*,*,12,*,*,*,*,*,*,*,*,*,*|4,12,*,*,*,13,*,*,*,*,*,*,*,*,*,*|4,13,*,*,*,14,*,*,*,*,*,*,*,*,*,*|5,-1,*,*,*,*,0,*,*,*,*,*,*,*,*,*|5,0,*,*,*,*,1,*,*,*,*,*,*,*,*,*|5,1,*,*,*,*,2,*,*,*,*,*,*,*,*,*|5,2,*,*,*,*,3,*,*,*,*,*,*,*,*,*|5,3,*,*,*,*,4,*,*,*,*,*,*,*,*,*|5,4,*,*,*,*,5,*,*,*,*,*,*,*,*,*|5,5,*,*,*,*,6,*,*,*,*,*,*,*,*,*|5,6,*,*,*,*,7,*,*,*,*,*,*,*,*,*|5,7,*,*,*,*,8,*,*,*,*,*,*,*,*,*|5,8,*,*,*,*,9,*,*,*,*,*,*,*,*,*|5,9,*,*,*,*,10,*,*,*,*,*,*,*,*,*|5,10,*,*,*,*,11,*,*,*,*,*,*,*,*,*|5,11,*,*,*,*,12,*,*,*,*,*,*,*,*,*|5,12,*,*,*,*,13,*,*,*,*,*,*,*,*,*|5,13,*,*,*,*,14,*,*,*,*,*,*,*,*,*|6,-1,*,*,*,*,*,0,*,*,*,*,*,*,*,*|6,0,*,*,*,*,*,1,*,*,*,*,*,*,*,*|6,1,*,*,*,*,*,2,*,*,*,*,*,*,*,*|6,2,*,*,*,*,*,3,*,*,*,*,*,*,*,*|6,3,*,*,*,*,*,4,*,*,*,*,*,*,*,*|6,4,*,*,*,*,*,5,*,*,*,*,*,*,*,*|6,5,*,*,*,*,*,6,*,*,*,*,*,*,*,*|6,6,*,*,*,*,*,7,*,*,*,*,*,*,*,*|6,7,*,*,*,*,*,8,*,*,*,*,*,*,*,*|6,8,*,*,*,*,*,9,*,*,*,*,*,*,*,*|6,9,*,*,*,*,*,10,*,*,*,*,*,*,*,*|6,10,*,*,*,*,*,11,*,*,*,*,*,*,*,*|6,11,*,*,*,*,*,12,*,*,*,*,*,*,*,*|6,12,*,*,*,*,*,13,*,*,*,*,*,*,*,*|6,13,*,*,*,*,*,14,*,*,*,*,*,*,*,*|7,-1,*,*,*,*,*,*,0,*,*,*,*,*,*,*|7,0,*,*,*,*,*,*,1,*,*,*,*,*,*,*|7,1,*,*,*,*,*,*,2,*,*,*,*,*,*,*|7,2,*,*,*,*,*,*,3,*,*,*,*,*,*,*|7,3,*,*,*,*,*,*,4,*,*,*,*,*,*,*|7,4,*,*,*,*,*,*,5,*,*,*,*,*,*,*|7,5,*,*,*,*,*,*,6,*,*,*,*,*,*,*|7,6,*,*,*,*,*,*,7,*,*,*,*,*,*,*|7,7,*,*,*,*,*,*,8,*,*,*,*,*,*,*|7,8,*,*,*,*,*,*,9,*,*,*,*,*,*,*|7,9,*,*,*,*,*,*,10,*,*,*,*,*,*,*|7,10,*,*,*,*,*,*,11,*,*,*,*,*,*,*|7,11,*,*,*,*,*,*,12,*,*,*,*,*,*,*|7,12,*,*,*,*,*,*,13,*,*,*,*,*,*,*|7,13,*,*,*,*,*,*,14,*,*,*,*,*,*,*|8,-1,*,*,*,*,*,*,*,0,*,*,*,*,*,*|8,0,*,*,*,*,*,*,*,1,*,*,*,*,*,*|8,1,*,*,*,*,*,*,*,2,*,*,*,*,*,*|8,2,*,*,*,*,*,*,*,3,*,*,*,*,*,*|8,3,*,*,*,*,*,*,*,4,*,*,*,*,*,*|8,4,*,*,*,*,*,*,*,5,*,*,*,*,*,*|8,5,*,*,*,*,*,*,*,6,*,*,*,*,*,*|8,6,*,*,*,*,*,*,*,7,*,*,*,*,*,*|8,7,*,*,*,*,*,*,*,8,*,*,*,*,*,*|8,8,*,*,*,*,*,*,*,9,*,*,*,*,*,*|8,9,*,*,*,*,*,*,*,10,*,*,*,*,*,*|8,10,*,*,*,*,*,*,*,11,*,*,*,*,*,*|8,11,*,*,*,*,*,*,*,12,*,*,*,*,*,*|8,12,*,*,*,*,*,*,*,13,*,*,*,*,*,*|8,13,*,*,*,*,*,*,*,14,*,*,*,*,*,*|9,-1,*,*,*,*,*,*,*,*,0,*,*,*,*,*|9,0,*,*,*,*,*,*,*,*,1,*,*,*,*,*|9,1,*,*,*,*,*,*,*,*,2,*,*,*,*,*|9,2,*,*,*,*,*,*,*,*,3,*,*,*,*,*|9,3,*,*,*,*,*,*,*,*,4,*,*,*,*,*|9,4,*,*,*,*,*,*,*,*,5,*,*,*,*,*|9,5,*,*,*,*,*,*,*,*,6,*,*,*,*,*|9,6,*,*,*,*,*,*,*,*,7,*,*,*,*,*|9,7,*,*,*,*,*,*,*,*,8,*,*,*,*,*|9,8,*,*,*,*,*,*,*,*,9,*,*,*,*,*|9,9,*,*,*,*,*,*,*,*,10,*,*,*,*,*|9,10,*,*,*,*,*,*,*,*,11,*,*,*,*,*|9,11,*,*,*,*,*,*,*,*,12,*,*,*,*,*|9,12,*,*,*,*,*,*,*,*,13,*,*,*,*,*|9,13,*,*,*,*,*,*,*,*,14,*,*,*,*,*|10,-1,*,*,*,*,*,*,*,*,*,0,*,*,*,*|10,0,*,*,*,*,*,*,*,*,*,1,*,*,*,*|10,1,*,*,*,*,*,*,*,*,*,2,*,*,*,*|10,2,*,*,*,*,*,*,*,*,*,3,*,*,*,*|10,3,*,*,*,*,*,*,*,*,*,4,*,*,*,*|10,4,*,*,*,*,*,*,*,*,*,5,*,*,*,*|10,5,*,*,*,*,*,*,*,*,*,6,*,*,*,*|10,6,*,*,*,*,*,*,*,*,*,7,*,*,*,*|10,7,*,*,*,*,*,*,*,*,*,8,*,*,*,*|10,8,*,*,*,*,*,*,*,*,*,9,*,*,*,*|10,9,*,*,*,*,*,*,*,*,*,10,*,*,*,*|10,10,*,*,*,*,*,*,*,*,*,11,*,*,*,*|10,11,*,*,*,*,*,*,*,*,*,12,*,*,*,*|10,12,*,*,*,*,*,*,*,*,*,13,*,*,*,*|10,13,*,*,*,*,*,*,*,*,*,14,*,*,*,*|11,-1,*,*,*,*,*,*,*,*,*,*,0,*,*,*|11,0,*,*,*,*,*,*,*,*,*,*,1,*,*,*|11,1,*,*,*,*,*,*,*,*,*,*,2,*,*,*|11,2,*,*,*,*,*,*,*,*,*,*,3,*,*,*|11,3,*,*,*,*,*,*,*,*,*,*,4,*,*,*|11,4,*,*,*,*,*,*,*,*,*,*,5,*,*,*|11,5,*,*,*,*,*,*,*,*,*,*,6,*,*,*|11,6,*,*,*,*,*,*,*,*,*,*,7,*,*,*|11,7,*,*,*,*,*,*,*,*,*,*,8,*,*,*|11,8,*,*,*,*,*,*,*,*,*,*,9,*,*,*|11,9,*,*,*,*,*,*,*,*,*,*,10,*,*,*|11,10,*,*,*,*,*,*,*,*,*,*,11,*,*,*|11,11,*,*,*,*,*,*,*,*,*,*,12,*,*,*|11,12,*,*,*,*,*,*,*,*,*,*,13,*,*,*|11,13,*,*,*,*,*,*,*,*,*,*,14,*,*,*|12,-1,*,*,*,*,*,*,*,*,*,*,*,0,*,*|12,0,*,*,*,*,*,*,*,*,*,*,*,1,*,*|12,1,*,*,*,*,*,*,*,*,*,*,*,2,*,*|12,2,*,*,*,*,*,*,*,*,*,*,*,3,*,*|12,3,*,*,*,*,*,*,*,*,*,*,*,4,*,*|12,4,*,*,*,*,*,*,*,*,*,*,*,5,*,*|12,5,*,*,*,*,*,*,*,*,*,*,*,6,*,*|12,6,*,*,*,*,*,*,*,*,*,*,*,7,*,*|12,7,*,*,*,*,*,*,*,*,*,*,*,8,*,*|12,8,*,*,*,*,*,*,*,*,*,*,*,9,*,*|12,9,*,*,*,*,*,*,*,*,*,*,*,10,*,*|12,10,*,*,*,*,*,*,*,*,*,*,*,11,*,*|12,11,*,*,*,*,*,*,*,*,*,*,*,12,*,*|12,12,*,*,*,*,*,*,*,*,*,*,*,13,*,*|12,13,*,*,*,*,*,*,*,*,*,*,*,14,*,*|13,-1,*,*,*,*,*,*,*,*,*,*,*,*,0,*|13,0,*,*,*,*,*,*,*,*,*,*,*,*,1,*|13,1,*,*,*,*,*,*,*,*,*,*,*,*,2,*|13,2,*,*,*,*,*,*,*,*,*,*,*,*,3,*|13,3,*,*,*,*,*,*,*,*,*,*,*,*,4,*|13,4,*,*,*,*,*,*,*,*,*,*,*,*,5,*|13,5,*,*,*,*,*,*,*,*,*,*,*,*,6,*|13,6,*,*,*,*,*,*,*,*,*,*,*,*,7,*|13,7,*,*,*,*,*,*,*,*,*,*,*,*,8,*|13,8,*,*,*,*,*,*,*,*,*,*,*,*,9,*|13,9,*,*,*,*,*,*,*,*,*,*,*,*,10,*|13,10,*,*,*,*,*,*,*,*,*,*,*,*,11,*|13,11,*,*,*,*,*,*,*,*,*,*,*,*,12,*|13,12,*,*,*,*,*,*,*,*,*,*,*,*,13,*|13,13,*,*,*,*,*,*,*,*,*,*,*,*,14,*|14,-1,*,*,*,*,*,*,*,*,*,*,*,*,*,0|14,0,*,*,*,*,*,*,*,*,*,*,*,*,*,1|14,1,*,*,*,*,*,*,*,*,*,*,*,*,*,2|14,2,*,*,*,*,*,*,*,*,*,*,*,*,*,3|14,3,*,*,*,*,*,*,*,*,*,*,*,*,*,4|14,4,*,*,*,*,*,*,*,*,*,*,*,*,*,5|14,5,*,*,*,*,*,*,*,*,*,*,*,*,*,6|14,6,*,*,*,*,*,*,*,*,*,*,*,*,*,7|14,7,*,*,*,*,*,*,*,*,*,*,*,*,*,8|14,8,*,*,*,*,*,*,*,*,*,*,*,*,*,9|14,9,*,*,*,*,*,*,*,*,*,*,*,*,*,10|14,10,*,*,*,*,*,*,*,*,*,*,*,*,*,11|14,11,*,*,*,*,*,*,*,*,*,*,*,*,*,12|14,12,*,*,*,*,*,*,*,*,*,*,*,*,*,13|14,13,*,*,*,*,*,*,*,*,*,*,*,*,*,14"""
        .split("\\|")
        .map { a =>
          val s = a.split(",").toSeq
          s.map {
            case "*" => -1 to 14
            case i => Seq(i.toInt)
          }
        }

    val mdd = MDD.fromStarred(tuples)
    mdd.lambda() shouldBe BigInt("3251598930961498112")
    mdd.edges() shouldBe 44596
  }

  it should "add many tuples" in {
    val source = getClass.getResource("tuples").toURI
    val tuples = scala.io.Source.fromFile(source, "UTF8").mkString.split("\\|").map(_.split(",").toSeq.map(i => Seq(i.toInt)))

    val mdd = MDD.fromStarred(tuples)
    mdd.lambda() shouldBe tuples.size

    mdd.reduce().lambda() shouldBe tuples.size

  }

  it should "add many many tuples" in {
    val source = getClass.getResource("tuples2").toURI
    val tuples = scala.io.Source.fromFile(source, "UTF8").mkString.split("\n").map(_.split(",\\ *").toSeq.map(i => Seq(i.toInt)))

    //for (it <- 0 until 100) {
      val mdd = MDD.fromStarred(tuples)
      mdd.lambda() shouldBe tuples.size

      mdd.reduce().lambda() shouldBe tuples.size
    //}

  }

  it should "merge MDD depths" in {
    val u = MDD(Seq(
      Seq(1, 2, 2, 5),
      Seq(1, 3, 3, 4),
      Seq(1, 2, 5, 3),
      Seq(2, 5, 5, 1),
      Seq(2, 5, 5, 2)))

    val expected = MDD(Seq(
      Seq(1, 2, 5),
      Seq(1, 3, 4),
      Seq(2, 5, 1),
      Seq(2, 5, 2)
    ))

    val merged = u.merge(List(1, 2))

    merged should contain theSameElementsAs expected

    val u2 = MDD(Seq(
      Seq(2, 1, 2, 5),
      Seq(3, 1, 3, 4),
      Seq(2, 1, 5, 3),
      Seq(5, 2, 5, 1),
      Seq(5, 2, 5, 2)))

    val expected2 = MDD(Seq(
      Seq(2, 1, 5),
      Seq(3, 1, 4),
      Seq(5, 2, 1),
      Seq(5, 2, 2)
    ))

    val merged2 = u2.merge(List(0, 2))

    merged2 should contain theSameElementsAs expected2
  }

}
